%{
open ParserTypes
%}

// Declare the tokens (terminal symbols)
%token <int> NUM
%token BOL
%token <string> VAR
%token TIMES DIV MOD PLUS MINUS LPAR RPAR LCB RCB LSB RSB AND 
%token OR NEG EQ NEQ GT GET LT LET TRUE FALSE
%token ELSE ASS SEMI IF WHILE INT FIRST SECOND READ WRITE DOT COMMA

// Specification of precedence and associativity of the operators ranking from low to high
%left EQ NEQ GT GET LT LET ELSE
%left PLUS MINUS OR
%left TIMES DIV AND MOD
%right SEMI
%left NEG

// declaring the initial non-terminal symbol
%start start

// spefication of the return type of each of the non-terminal symbols
// where C is starting symbol as specified by the given GCL language
%type <program> start
%type <decl> decl
%type <exprl> exprl
%type <expra> expra
%type <exprb> exprb
%type <stat> stat
%type <program> program

%%

// The first production in "formal" notation is
// start -> S
// here written as:
start: program   { $1 }

//The grammar for the declaration (D) :
decl:
  | INT VAR SEMI                                  { VariableDeclaration($2) }
  | INT LSB NUM RSB VAR SEMI                      { ArrayDeclaration($3, $5) }
  | LCB INT FIRST SEMI INT SECOND RCB VAR SEMI    { RecordDeclaration($8) }
  | decl decl                                     { Declarations($1, $2) }
  |                                               { Epsilon } 
                                    

//The grammar for the expression (a) 
expra:
  | NUM                 { Num($1) }
  | VAR                 { VariableA($1) }
  | VAR LSB expra RSB   { ArrayExpressionA($1, $3) }
  | VAR DOT FIRST       { FirstRecordA($1) }
  | VAR DOT SECOND      { SecondRecordA($1) }
  | expra TIMES expra   { TimesExpr($1,$3) }
  | expra DIV expra     { DivExpr($1,$3) }
  | expra MOD expra     { ModExpr($1,$3) }
  | expra PLUS expra    { PlusExpr($1,$3) }
  | expra MINUS expra   { MinusExpr($1,$3) }

//The grammar for the expression (l) :
exprl:
  | VAR               { VariableL($1) }
  | VAR LSB expra RSB { ArrayExpressionL($1, $3) }
  | VAR DOT FIRST     { FirstRecordL($1) }
  | VAR DOT SECOND    { SecondRecordL($1) }

//The grammar for the expr (b) 
exprb:
  | TRUE						  { True }
  | FALSE						  { False }
  | expra LT expra	  { LeThan($1,$3) }
  | expra GT expra    { GrThan($1,$3) }
  | expra LET expra	  { LeEqThan($1,$3) }
  | expra GET expra   { GrEqThan($1,$3) }
  | expra EQ expra    { Equals($1,$3) }
  | expra NEQ expra   { NotEquals($1,$3) }
  | exprb AND exprb   { AndExpr($1,$3) }
  | exprb OR exprb    { OrExpr($1,$3) }
  | NEG exprb				  { NegExpr($2) }

//The grammar for the statement (S)
stat:
  | exprl ASS expra SEMI                                    { Ass($1, $3) }
  | VAR ASS LPAR expra COMMA expra RPAR SEMI                { RecordAss($1, $4, $6) }
  | stat stat                                               { Stats($1, $2) }
  | IF LPAR exprb RPAR LCB stat RCB                         { IfStat($3, $6)} 
  | IF LPAR exprb RPAR LCB stat RCB ELSE LCB stat RCB       { IfElseStat($3, $6, $10) }
  | WHILE LPAR exprb RPAR LCB stat RCB                      { WhileStat($3, $6) }
  | READ exprl SEMI                                         { Read($2) }
  | WRITE expra SEMI                                        { Write($2) }

program:
  | LCB decl stat RCB   { Program($2, $3) }
%%
