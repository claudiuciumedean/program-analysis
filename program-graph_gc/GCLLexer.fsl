{
module GCLLexer
open FSharp.Text.Lexing
open System
// open token module
open GCLParser
}

// define certain regular expressions
let digit       = ['0'-'9']
let num         = digit+ ( '.' digit+)?  ('E' ('+'|'-')? digit+ )?
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'
let var     	= ['a'-'z''A'-'Z'](['a'-'z''A'-'Z''_'] | digit)*


//define rules and what tokens should be generated when encountering
//certain symbols

rule tokenize = parse
// deal with tokens that need to be ignored (skip them)
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }

// symbols/strings and their associated token to be built
| num           { NUM(Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| '*'           { TIMES }
| '/'           { DIV }	
| '%'           { MOD }	
| '+'           { PLUS }
| '-'           { MINUS }
| '('           { LPAR }
| ')'           { RPAR }
| '{'           { LCB }
| '}'           { RCB }
| '['           { LSB }
| ']'           { RSB }
| "true"		{ TRUE }
| "false"		{ FALSE }
| '&'			{ AND }
| '|'			{ OR }
| "not"			{ NEG }
| "=="			{ EQ }
| "!="			{ NEQ }
| '>'			{ GT }
| ">="			{ GET }
| '<'			{ LT }
| "<="			{ LET }
| "else"		{ ELSE }
| ":="			{ ASS }
| ";"			{ SEMI }
| ","           { COMMA }
| "."           { DOT }
| "if"			{ IF }
| "while"		{ WHILE }
| "read"		{ READ }
| "write"		{ WRITE }
| "int"		    { INT }
| "fst"		    { FIRST }
| "snd"		    { SECOND }
| variable		{ VAR(LexBuffer<_>.LexemeString lexbuf) }
