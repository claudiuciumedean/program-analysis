{
module GCLLexer
open Microsoft.FSharp.Text.Lexing
// open token module
open GCLParser
}

// define certain regular expressions
let digit       = ['0'-'9']
let num         = digit+ ( '.' digit+)?  ('E' ('+'|'-')? digit+ )?
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'
let variable	= ['a'-'z''A'-'Z'](['a'-'z''A'-'Z''_'] | digit)*


//define rules and what tokens should be generated when encountering
//certain symbols

rule tokenize = parse
// deal with tokens that need to be ignored (skip them)
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }

// symbols/strings and their associated token to be built
| num           { NUM(Double.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| '*'           { TIMES }
| '/'           { DIV }	
| '+'           { PLUS }
| '-'           { MINUS }
| '^'           { POW }
| '('           { LPAR }
| ')'           { RPAR }
| "true"		{ TRUE }
| "false"		{ FALSE }
| '&'			{ AND }
| '|'			{ OR }
| "&&"			{ SAND }
| "||"			{ SOR }
| '!'			{ NEG }
| '='			{ EQ }
| "!="			{ NEQ }
| '>'			{ GT }
| ">="			{ GET }
| '<'			{ LT }
| "<="			{ LET }
| "->"			{ FUN }
| "[]"			{ ELSE }
| ":="			{ ASS }
| "skip"		{ SKIP }
| ";"			{ SEMI }
| "if"			{ IF }
| "fi"			{ FI }
| "do"			{ DO }
| "od"			{ OD }
| eof           { EOF }
| variable		{ VAR(LexBuffer<_>.LexemeString lexbuf) }