// Implementation file for parser generated by fsyacc
module GCLParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "GCLParser.fsp"

open ParserTypes

# 10 "GCLParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | ELSE
  | ASS
  | SEMI
  | IF
  | WHILE
  | INT
  | FIRST
  | SECOND
  | READ
  | WRITE
  | DOT
  | COMMA
  | OR
  | NEG
  | EQ
  | NEQ
  | GT
  | GET
  | LT
  | LET
  | TRUE
  | FALSE
  | TIMES
  | DIV
  | MOD
  | PLUS
  | MINUS
  | LPAR
  | RPAR
  | LCB
  | RCB
  | LSB
  | RSB
  | AND
  | VAR of (string)
  | BOL
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_ELSE
    | TOKEN_ASS
    | TOKEN_SEMI
    | TOKEN_IF
    | TOKEN_WHILE
    | TOKEN_INT
    | TOKEN_FIRST
    | TOKEN_SECOND
    | TOKEN_READ
    | TOKEN_WRITE
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_OR
    | TOKEN_NEG
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_GT
    | TOKEN_GET
    | TOKEN_LT
    | TOKEN_LET
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LCB
    | TOKEN_RCB
    | TOKEN_LSB
    | TOKEN_RSB
    | TOKEN_AND
    | TOKEN_VAR
    | TOKEN_BOL
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_decl
    | NONTERM_expra
    | NONTERM_exprl
    | NONTERM_exprb
    | NONTERM_stat
    | NONTERM_program

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | ELSE  -> 0 
  | ASS  -> 1 
  | SEMI  -> 2 
  | IF  -> 3 
  | WHILE  -> 4 
  | INT  -> 5 
  | FIRST  -> 6 
  | SECOND  -> 7 
  | READ  -> 8 
  | WRITE  -> 9 
  | DOT  -> 10 
  | COMMA  -> 11 
  | OR  -> 12 
  | NEG  -> 13 
  | EQ  -> 14 
  | NEQ  -> 15 
  | GT  -> 16 
  | GET  -> 17 
  | LT  -> 18 
  | LET  -> 19 
  | TRUE  -> 20 
  | FALSE  -> 21 
  | TIMES  -> 22 
  | DIV  -> 23 
  | MOD  -> 24 
  | PLUS  -> 25 
  | MINUS  -> 26 
  | LPAR  -> 27 
  | RPAR  -> 28 
  | LCB  -> 29 
  | RCB  -> 30 
  | LSB  -> 31 
  | RSB  -> 32 
  | AND  -> 33 
  | VAR _ -> 34 
  | BOL  -> 35 
  | NUM _ -> 36 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_ELSE 
  | 1 -> TOKEN_ASS 
  | 2 -> TOKEN_SEMI 
  | 3 -> TOKEN_IF 
  | 4 -> TOKEN_WHILE 
  | 5 -> TOKEN_INT 
  | 6 -> TOKEN_FIRST 
  | 7 -> TOKEN_SECOND 
  | 8 -> TOKEN_READ 
  | 9 -> TOKEN_WRITE 
  | 10 -> TOKEN_DOT 
  | 11 -> TOKEN_COMMA 
  | 12 -> TOKEN_OR 
  | 13 -> TOKEN_NEG 
  | 14 -> TOKEN_EQ 
  | 15 -> TOKEN_NEQ 
  | 16 -> TOKEN_GT 
  | 17 -> TOKEN_GET 
  | 18 -> TOKEN_LT 
  | 19 -> TOKEN_LET 
  | 20 -> TOKEN_TRUE 
  | 21 -> TOKEN_FALSE 
  | 22 -> TOKEN_TIMES 
  | 23 -> TOKEN_DIV 
  | 24 -> TOKEN_MOD 
  | 25 -> TOKEN_PLUS 
  | 26 -> TOKEN_MINUS 
  | 27 -> TOKEN_LPAR 
  | 28 -> TOKEN_RPAR 
  | 29 -> TOKEN_LCB 
  | 30 -> TOKEN_RCB 
  | 31 -> TOKEN_LSB 
  | 32 -> TOKEN_RSB 
  | 33 -> TOKEN_AND 
  | 34 -> TOKEN_VAR 
  | 35 -> TOKEN_BOL 
  | 36 -> TOKEN_NUM 
  | 39 -> TOKEN_end_of_input
  | 37 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_decl 
    | 3 -> NONTERM_decl 
    | 4 -> NONTERM_decl 
    | 5 -> NONTERM_decl 
    | 6 -> NONTERM_decl 
    | 7 -> NONTERM_expra 
    | 8 -> NONTERM_expra 
    | 9 -> NONTERM_expra 
    | 10 -> NONTERM_expra 
    | 11 -> NONTERM_expra 
    | 12 -> NONTERM_expra 
    | 13 -> NONTERM_expra 
    | 14 -> NONTERM_expra 
    | 15 -> NONTERM_expra 
    | 16 -> NONTERM_expra 
    | 17 -> NONTERM_exprl 
    | 18 -> NONTERM_exprl 
    | 19 -> NONTERM_exprl 
    | 20 -> NONTERM_exprl 
    | 21 -> NONTERM_exprb 
    | 22 -> NONTERM_exprb 
    | 23 -> NONTERM_exprb 
    | 24 -> NONTERM_exprb 
    | 25 -> NONTERM_exprb 
    | 26 -> NONTERM_exprb 
    | 27 -> NONTERM_exprb 
    | 28 -> NONTERM_exprb 
    | 29 -> NONTERM_exprb 
    | 30 -> NONTERM_exprb 
    | 31 -> NONTERM_exprb 
    | 32 -> NONTERM_stat 
    | 33 -> NONTERM_stat 
    | 34 -> NONTERM_stat 
    | 35 -> NONTERM_stat 
    | 36 -> NONTERM_stat 
    | 37 -> NONTERM_stat 
    | 38 -> NONTERM_stat 
    | 39 -> NONTERM_stat 
    | 40 -> NONTERM_stat 
    | 41 -> NONTERM_program 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 39 
let _fsyacc_tagOfErrorTerminal = 37

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | ELSE  -> "ELSE" 
  | ASS  -> "ASS" 
  | SEMI  -> "SEMI" 
  | IF  -> "IF" 
  | WHILE  -> "WHILE" 
  | INT  -> "INT" 
  | FIRST  -> "FIRST" 
  | SECOND  -> "SECOND" 
  | READ  -> "READ" 
  | WRITE  -> "WRITE" 
  | DOT  -> "DOT" 
  | COMMA  -> "COMMA" 
  | OR  -> "OR" 
  | NEG  -> "NEG" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | GT  -> "GT" 
  | GET  -> "GET" 
  | LT  -> "LT" 
  | LET  -> "LET" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LCB  -> "LCB" 
  | RCB  -> "RCB" 
  | LSB  -> "LSB" 
  | RSB  -> "RSB" 
  | AND  -> "AND" 
  | VAR _ -> "VAR" 
  | BOL  -> "BOL" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | ELSE  -> (null : System.Object) 
  | ASS  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | FIRST  -> (null : System.Object) 
  | SECOND  -> (null : System.Object) 
  | READ  -> (null : System.Object) 
  | WRITE  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GET  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LCB  -> (null : System.Object) 
  | RCB  -> (null : System.Object) 
  | LSB  -> (null : System.Object) 
  | RSB  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOL  -> (null : System.Object) 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 20us; 20us; 21us; 20us; 108us; 21us; 23us; 65535us; 24us; 25us; 48us; 30us; 49us; 31us; 50us; 32us; 51us; 33us; 52us; 34us; 55us; 35us; 62us; 37us; 63us; 38us; 64us; 39us; 65us; 40us; 66us; 41us; 67us; 42us; 73us; 36us; 74us; 36us; 75us; 36us; 76us; 43us; 79us; 44us; 81us; 45us; 82us; 46us; 91us; 36us; 99us; 36us; 106us; 47us; 10us; 65535us; 21us; 78us; 85us; 78us; 86us; 78us; 87us; 78us; 88us; 78us; 89us; 78us; 93us; 78us; 96us; 78us; 101us; 78us; 103us; 104us; 5us; 65535us; 73us; 68us; 74us; 69us; 75us; 70us; 91us; 71us; 99us; 72us; 9us; 65535us; 21us; 89us; 85us; 85us; 86us; 85us; 87us; 85us; 88us; 85us; 89us; 85us; 93us; 86us; 96us; 87us; 101us; 88us; 1us; 65535us; 0us; 2us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 31us; 42us; 48us; 58us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 2us; 5us; 5us; 2us; 5us; 41us; 1us; 7us; 4us; 8us; 9us; 10us; 11us; 1us; 9us; 6us; 9us; 12us; 13us; 14us; 15us; 16us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 6us; 12us; 12us; 13us; 14us; 15us; 16us; 6us; 12us; 13us; 13us; 14us; 15us; 16us; 6us; 12us; 13us; 14us; 14us; 15us; 16us; 6us; 12us; 13us; 14us; 15us; 15us; 16us; 6us; 12us; 13us; 14us; 15us; 16us; 16us; 6us; 12us; 13us; 14us; 15us; 16us; 18us; 11us; 12us; 13us; 14us; 15us; 16us; 23us; 24us; 25us; 26us; 27us; 28us; 6us; 12us; 13us; 14us; 15us; 16us; 23us; 6us; 12us; 13us; 14us; 15us; 16us; 24us; 6us; 12us; 13us; 14us; 15us; 16us; 25us; 6us; 12us; 13us; 14us; 15us; 16us; 26us; 6us; 12us; 13us; 14us; 15us; 16us; 27us; 6us; 12us; 13us; 14us; 15us; 16us; 28us; 6us; 12us; 13us; 14us; 15us; 16us; 32us; 6us; 12us; 13us; 14us; 15us; 16us; 33us; 6us; 12us; 13us; 14us; 15us; 16us; 34us; 6us; 12us; 13us; 14us; 15us; 16us; 34us; 6us; 12us; 13us; 14us; 15us; 16us; 40us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 4us; 17us; 18us; 19us; 20us; 6us; 17us; 18us; 19us; 20us; 32us; 34us; 1us; 18us; 1us; 18us; 2us; 19us; 20us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 3us; 29us; 29us; 30us; 3us; 29us; 30us; 30us; 3us; 29us; 30us; 31us; 4us; 29us; 30us; 36us; 37us; 3us; 29us; 30us; 38us; 1us; 29us; 1us; 30us; 1us; 31us; 2us; 32us; 34us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 2us; 35us; 35us; 3us; 35us; 36us; 37us; 2us; 35us; 37us; 2us; 35us; 38us; 2us; 35us; 41us; 2us; 36us; 37us; 2us; 36us; 37us; 2us; 36us; 37us; 2us; 36us; 37us; 2us; 36us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 40us; 1us; 40us; 1us; 41us; 1us; 41us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 44us; 47us; 49us; 54us; 56us; 63us; 65us; 68us; 70us; 72us; 79us; 86us; 93us; 100us; 107us; 114us; 126us; 133us; 140us; 147us; 154us; 161us; 168us; 175us; 182us; 189us; 196us; 203us; 205us; 207us; 209us; 211us; 213us; 218us; 225us; 227us; 229us; 232us; 234us; 236us; 238us; 240us; 242us; 244us; 246us; 248us; 250us; 252us; 256us; 260us; 264us; 269us; 273us; 275us; 277us; 279us; 282us; 284us; 286us; 288us; 290us; 292us; 294us; 296us; 298us; 301us; 305us; 308us; 311us; 314us; 317us; 320us; 323us; 326us; 329us; 331us; 333us; 335us; 337us; 339us; 341us; 343us; 345us; 347us; 349us; 351us; 353us; 355us; 357us; |]
let _fsyacc_action_rows = 110
let _fsyacc_actionTableElements = [|1us; 32768us; 29us; 108us; 0us; 49152us; 0us; 16385us; 2us; 32768us; 31us; 6us; 34us; 4us; 1us; 32768us; 2us; 5us; 0us; 16386us; 1us; 32768us; 36us; 7us; 1us; 32768us; 32us; 8us; 1us; 32768us; 34us; 9us; 1us; 32768us; 2us; 10us; 0us; 16387us; 1us; 32768us; 5us; 12us; 1us; 32768us; 6us; 13us; 1us; 32768us; 2us; 14us; 1us; 32768us; 5us; 15us; 1us; 32768us; 7us; 16us; 1us; 32768us; 30us; 17us; 1us; 32768us; 34us; 18us; 1us; 32768us; 2us; 19us; 0us; 16388us; 2us; 16389us; 5us; 3us; 29us; 11us; 7us; 16390us; 3us; 90us; 4us; 98us; 5us; 3us; 8us; 103us; 9us; 106us; 29us; 11us; 34us; 54us; 0us; 16391us; 2us; 16392us; 10us; 27us; 31us; 24us; 2us; 32768us; 34us; 23us; 36us; 22us; 6us; 32768us; 22us; 48us; 23us; 49us; 24us; 50us; 25us; 51us; 26us; 52us; 32us; 26us; 0us; 16393us; 2us; 32768us; 6us; 28us; 7us; 29us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 3us; 16399us; 22us; 48us; 23us; 49us; 24us; 50us; 3us; 16400us; 22us; 48us; 23us; 49us; 24us; 50us; 6us; 32768us; 22us; 48us; 23us; 49us; 24us; 50us; 25us; 51us; 26us; 52us; 32us; 56us; 11us; 32768us; 14us; 66us; 15us; 67us; 16us; 63us; 17us; 65us; 18us; 62us; 19us; 64us; 22us; 48us; 23us; 49us; 24us; 50us; 25us; 51us; 26us; 52us; 5us; 16407us; 22us; 48us; 23us; 49us; 24us; 50us; 25us; 51us; 26us; 52us; 5us; 16408us; 22us; 48us; 23us; 49us; 24us; 50us; 25us; 51us; 26us; 52us; 5us; 16409us; 22us; 48us; 23us; 49us; 24us; 50us; 25us; 51us; 26us; 52us; 5us; 16410us; 22us; 48us; 23us; 49us; 24us; 50us; 25us; 51us; 26us; 52us; 5us; 16411us; 22us; 48us; 23us; 49us; 24us; 50us; 25us; 51us; 26us; 52us; 5us; 16412us; 22us; 48us; 23us; 49us; 24us; 50us; 25us; 51us; 26us; 52us; 6us; 32768us; 2us; 77us; 22us; 48us; 23us; 49us; 24us; 50us; 25us; 51us; 26us; 52us; 6us; 32768us; 2us; 80us; 22us; 48us; 23us; 49us; 24us; 50us; 25us; 51us; 26us; 52us; 6us; 32768us; 11us; 82us; 22us; 48us; 23us; 49us; 24us; 50us; 25us; 51us; 26us; 52us; 6us; 32768us; 22us; 48us; 23us; 49us; 24us; 50us; 25us; 51us; 26us; 52us; 28us; 83us; 6us; 32768us; 2us; 107us; 22us; 48us; 23us; 49us; 24us; 50us; 25us; 51us; 26us; 52us; 2us; 32768us; 34us; 23us; 36us; 22us; 2us; 32768us; 34us; 23us; 36us; 22us; 2us; 32768us; 34us; 23us; 36us; 22us; 2us; 32768us; 34us; 23us; 36us; 22us; 2us; 32768us; 34us; 23us; 36us; 22us; 2us; 16401us; 10us; 57us; 31us; 55us; 3us; 16401us; 1us; 76us; 10us; 57us; 31us; 55us; 2us; 32768us; 34us; 23us; 36us; 22us; 0us; 16402us; 2us; 32768us; 6us; 58us; 7us; 59us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 2us; 32768us; 34us; 23us; 36us; 22us; 2us; 32768us; 34us; 23us; 36us; 22us; 2us; 32768us; 34us; 23us; 36us; 22us; 2us; 32768us; 34us; 23us; 36us; 22us; 2us; 32768us; 34us; 23us; 36us; 22us; 2us; 32768us; 34us; 23us; 36us; 22us; 0us; 16413us; 1us; 16414us; 33us; 73us; 0us; 16415us; 3us; 32768us; 12us; 74us; 28us; 92us; 33us; 73us; 3us; 32768us; 12us; 74us; 28us; 100us; 33us; 73us; 5us; 32768us; 13us; 75us; 20us; 60us; 21us; 61us; 34us; 23us; 36us; 22us; 5us; 32768us; 13us; 75us; 20us; 60us; 21us; 61us; 34us; 23us; 36us; 22us; 5us; 32768us; 13us; 75us; 20us; 60us; 21us; 61us; 34us; 23us; 36us; 22us; 3us; 32768us; 27us; 81us; 34us; 23us; 36us; 22us; 0us; 16416us; 1us; 32768us; 1us; 79us; 2us; 32768us; 34us; 23us; 36us; 22us; 0us; 16417us; 2us; 32768us; 34us; 23us; 36us; 22us; 2us; 32768us; 34us; 23us; 36us; 22us; 1us; 32768us; 2us; 84us; 0us; 16418us; 5us; 16419us; 3us; 90us; 4us; 98us; 8us; 103us; 9us; 106us; 34us; 54us; 6us; 32768us; 3us; 90us; 4us; 98us; 8us; 103us; 9us; 106us; 30us; 94us; 34us; 54us; 6us; 32768us; 3us; 90us; 4us; 98us; 8us; 103us; 9us; 106us; 30us; 97us; 34us; 54us; 6us; 32768us; 3us; 90us; 4us; 98us; 8us; 103us; 9us; 106us; 30us; 102us; 34us; 54us; 6us; 32768us; 3us; 90us; 4us; 98us; 8us; 103us; 9us; 106us; 30us; 109us; 34us; 54us; 1us; 32768us; 27us; 91us; 5us; 32768us; 13us; 75us; 20us; 60us; 21us; 61us; 34us; 23us; 36us; 22us; 1us; 32768us; 29us; 93us; 5us; 32768us; 3us; 90us; 4us; 98us; 8us; 103us; 9us; 106us; 34us; 54us; 1us; 16420us; 0us; 95us; 1us; 32768us; 29us; 96us; 5us; 32768us; 3us; 90us; 4us; 98us; 8us; 103us; 9us; 106us; 34us; 54us; 0us; 16421us; 1us; 32768us; 27us; 99us; 5us; 32768us; 13us; 75us; 20us; 60us; 21us; 61us; 34us; 23us; 36us; 22us; 1us; 32768us; 29us; 101us; 5us; 32768us; 3us; 90us; 4us; 98us; 8us; 103us; 9us; 106us; 34us; 54us; 0us; 16422us; 1us; 32768us; 34us; 53us; 1us; 32768us; 2us; 105us; 0us; 16423us; 2us; 32768us; 34us; 23us; 36us; 22us; 0us; 16424us; 2us; 16390us; 5us; 3us; 29us; 11us; 0us; 16425us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 4us; 7us; 9us; 10us; 12us; 14us; 16us; 18us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 36us; 39us; 47us; 48us; 51us; 54us; 61us; 62us; 65us; 66us; 67us; 68us; 69us; 70us; 74us; 78us; 85us; 97us; 103us; 109us; 115us; 121us; 127us; 133us; 140us; 147us; 154us; 161us; 168us; 171us; 174us; 177us; 180us; 183us; 186us; 190us; 193us; 194us; 197us; 198us; 199us; 200us; 201us; 204us; 207us; 210us; 213us; 216us; 219us; 220us; 222us; 223us; 227us; 231us; 237us; 243us; 249us; 253us; 254us; 256us; 259us; 260us; 263us; 266us; 268us; 269us; 275us; 282us; 289us; 296us; 303us; 305us; 311us; 313us; 319us; 321us; 323us; 329us; 330us; 332us; 338us; 340us; 346us; 347us; 349us; 351us; 352us; 355us; 356us; 359us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 3us; 6us; 9us; 2us; 0us; 1us; 1us; 4us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 4us; 3us; 3us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 4us; 4us; 8us; 2us; 7us; 11us; 7us; 3us; 3us; 4us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 65535us; 16386us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 65535us; 16403us; 16404us; 16405us; 16406us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16421us; 65535us; 65535us; 65535us; 65535us; 16422us; 65535us; 65535us; 16423us; 65535us; 16424us; 65535us; 16425us; |]
let _fsyacc_reductions ()  =    [| 
# 329 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 338 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "GCLParser.fsp"
                                        _1 
                   )
# 38 "GCLParser.fsp"
                 : program));
# 349 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "GCLParser.fsp"
                                                                         VariableDeclaration(_2) 
                   )
# 42 "GCLParser.fsp"
                 : decl));
# 360 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "GCLParser.fsp"
                                                                         ArrayDeclaration(_3, _5) 
                   )
# 43 "GCLParser.fsp"
                 : decl));
# 372 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "GCLParser.fsp"
                                                                         RecordDeclaration(_8) 
                   )
# 44 "GCLParser.fsp"
                 : decl));
# 383 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : decl)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "GCLParser.fsp"
                                                                         Declarations(_1, _2) 
                   )
# 45 "GCLParser.fsp"
                 : decl));
# 395 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "GCLParser.fsp"
                                                                         Epsilon 
                   )
# 46 "GCLParser.fsp"
                 : decl));
# 405 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "GCLParser.fsp"
                                               Num(_1) 
                   )
# 50 "GCLParser.fsp"
                 : expra));
# 416 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "GCLParser.fsp"
                                               VariableA(_1) 
                   )
# 51 "GCLParser.fsp"
                 : expra));
# 427 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "GCLParser.fsp"
                                               ArrayExpressionA(_1, _3) 
                   )
# 52 "GCLParser.fsp"
                 : expra));
# 439 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "GCLParser.fsp"
                                               FirstRecordA(_1) 
                   )
# 53 "GCLParser.fsp"
                 : expra));
# 450 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "GCLParser.fsp"
                                               SecondRecordA(_1) 
                   )
# 54 "GCLParser.fsp"
                 : expra));
# 461 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "GCLParser.fsp"
                                               TimesExpr(_1,_3) 
                   )
# 55 "GCLParser.fsp"
                 : expra));
# 473 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "GCLParser.fsp"
                                               DivExpr(_1,_3) 
                   )
# 56 "GCLParser.fsp"
                 : expra));
# 485 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "GCLParser.fsp"
                                               ModExpr(_1,_3) 
                   )
# 57 "GCLParser.fsp"
                 : expra));
# 497 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "GCLParser.fsp"
                                               PlusExpr(_1,_3) 
                   )
# 58 "GCLParser.fsp"
                 : expra));
# 509 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "GCLParser.fsp"
                                               MinusExpr(_1,_3) 
                   )
# 59 "GCLParser.fsp"
                 : expra));
# 521 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "GCLParser.fsp"
                                             VariableL(_1) 
                   )
# 63 "GCLParser.fsp"
                 : exprl));
# 532 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "GCLParser.fsp"
                                             ArrayExpressionL(_1, _3) 
                   )
# 64 "GCLParser.fsp"
                 : exprl));
# 544 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "GCLParser.fsp"
                                             FirstRecordL(_1) 
                   )
# 65 "GCLParser.fsp"
                 : exprl));
# 555 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "GCLParser.fsp"
                                             SecondRecordL(_1) 
                   )
# 66 "GCLParser.fsp"
                 : exprl));
# 566 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "GCLParser.fsp"
                                       True 
                   )
# 70 "GCLParser.fsp"
                 : exprb));
# 576 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "GCLParser.fsp"
                                        False 
                   )
# 71 "GCLParser.fsp"
                 : exprb));
# 586 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "GCLParser.fsp"
                                            LeThan(_1,_3) 
                   )
# 72 "GCLParser.fsp"
                 : exprb));
# 598 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "GCLParser.fsp"
                                             GrThan(_1,_3) 
                   )
# 73 "GCLParser.fsp"
                 : exprb));
# 610 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "GCLParser.fsp"
                                             LeEqThan(_1,_3) 
                   )
# 74 "GCLParser.fsp"
                 : exprb));
# 622 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "GCLParser.fsp"
                                             GrEqThan(_1,_3) 
                   )
# 75 "GCLParser.fsp"
                 : exprb));
# 634 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "GCLParser.fsp"
                                             Equals(_1,_3) 
                   )
# 76 "GCLParser.fsp"
                 : exprb));
# 646 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "GCLParser.fsp"
                                             NotEquals(_1,_3) 
                   )
# 77 "GCLParser.fsp"
                 : exprb));
# 658 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : exprb)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : exprb)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "GCLParser.fsp"
                                             AndExpr(_1,_3) 
                   )
# 78 "GCLParser.fsp"
                 : exprb));
# 670 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : exprb)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : exprb)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "GCLParser.fsp"
                                             OrExpr(_1,_3) 
                   )
# 79 "GCLParser.fsp"
                 : exprb));
# 682 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : exprb)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "GCLParser.fsp"
                                          NegExpr(_2) 
                   )
# 80 "GCLParser.fsp"
                 : exprb));
# 693 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "GCLParser.fsp"
                                                                                   AssX(_1, _3) 
                   )
# 84 "GCLParser.fsp"
                 : stat));
# 705 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : exprl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "GCLParser.fsp"
                                                                                   Ass(_1, _3) 
                   )
# 85 "GCLParser.fsp"
                 : stat));
# 717 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "GCLParser.fsp"
                                                                                   RecordAss(_1, _4, _6) 
                   )
# 86 "GCLParser.fsp"
                 : stat));
# 730 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : stat)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : stat)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "GCLParser.fsp"
                                                                                   Stats(_1, _2) 
                   )
# 87 "GCLParser.fsp"
                 : stat));
# 742 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : exprb)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : stat)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "GCLParser.fsp"
                                                                                   IfStat(_3, _6)
                   )
# 88 "GCLParser.fsp"
                 : stat));
# 754 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : exprb)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : stat)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : stat)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "GCLParser.fsp"
                                                                                   IfElseStat(_3, _6, _10) 
                   )
# 89 "GCLParser.fsp"
                 : stat));
# 767 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : exprb)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : stat)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "GCLParser.fsp"
                                                                                   WhileStat(_3, _6) 
                   )
# 90 "GCLParser.fsp"
                 : stat));
# 779 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : exprl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "GCLParser.fsp"
                                                                                   Read(_2) 
                   )
# 91 "GCLParser.fsp"
                 : stat));
# 790 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expra)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "GCLParser.fsp"
                                                                                   Write(_2) 
                   )
# 92 "GCLParser.fsp"
                 : stat));
# 801 "GCLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : stat)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "GCLParser.fsp"
                                               Prog(_2, _3) 
                   )
# 95 "GCLParser.fsp"
                 : program));
|]
# 814 "GCLParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 40;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
